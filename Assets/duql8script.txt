using UnityEngine;
using GoogleMobileAds.Api;
using System;
using UnityEngine.Events;
using UnityEngine.UI;

public class shop : MonoBehaviour
{
    public GameObject shops;
    GameObject spd;
    GameObject pnum;
    GameObject bg;
    private RewardedAd rewardedAd;
    int number = 0;
    // Use this for initialization
    // 関数を登録するもの：広告表示をしたときに実行する（Unityエディタから設定）
    public UnityEvent OnOpeningAd;
    // 関数を登録するもの：広告表示を閉じたときに実行する（Unityエディタから設定）
    public UnityEvent OnClosedAd;

    private InterstitialAd interstitial;
    private void Start()
    {
        RequestInterstitial();
        shops.SetActive(false);
        pnum = GameObject.Find("presentnum");
        spd = GameObject.Find("spawndirecot");
        bg = GameObject.Find("BGM");
    }

    // 広告読み込み：次の広告表示の前に実行しておく必要あり
    public void RequestInterstitial()
    {
#if UNITY_ANDROID
        string adUnitId = "ca-app-pub-6337026109907124/9668241304";
#elif UNITY_IPHONE
        string adUnitId = "ca-app-pub-3940256099942544/4411468910";
#else
        string adUnitId = "unexpected_platform";
#endif
        // Initialize an InterstitialAd.
        this.interstitial = new InterstitialAd(adUnitId);
        DestroyInterstitialAd();

        this.interstitial.OnAdLoaded += HandleOnAdLoaded;
        this.interstitial.OnAdFailedToLoad += HandleOnAdFailedToLoad;
        this.interstitial.OnAdOpening += HandleOnAdOpened;
        this.interstitial.OnAdClosed += HandleOnAdClosed;
        //this.interstitial.OnAdLeavingApplication += HandleOnAdLeavingApplication;

        // Create an empty ad request.
        AdRequest request = new AdRequest.Builder().Build();
        // Load the interstitial with the request.
        this.interstitial.LoadAd(request);
    }

    // OnAdLoaded イベントは、広告の読み込みが完了すると実行されます。
    public void HandleOnAdLoaded(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdLoaded event received");
    }

    // OnAdFailedToLoad イベントは、広告の読み込みに失敗すると呼び出されます。Message パラメータは、発生した障害のタイプを示します。
    public void HandleOnAdFailedToLoad(object sender, AdFailedToLoadEventArgs args)
    {
       // MonoBehaviour.print("HandleFailedToReceiveAd event received with message: "
                            //+ args.Message);
    }

    // このメソッドは、広告がデバイスの画面いっぱいに表示されたときに呼び出されます。
    public void HandleOnAdOpened(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdOpened event received");
        OnOpeningAd.Invoke();
    }

    // このメソッドは、ユーザーが「閉じる」アイコンまたは「戻る」ボタンをタップしてインタースティシャル広告を閉じたときに呼び出されます。音声出力やゲームループを一時停止するアプリの場合は、ここで再開すると効果的です。
    public void HandleOnAdClosed(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdClosed event received");
        OnClosedAd.Invoke();
        RequestInterstitial();
        switch (number)
        {
            case 0:
                pnum.GetComponent<presentnum>().add(5, 0, 0);
                break;
            case 1:
                pnum.GetComponent<presentnum>().add(0, 5, 0);
                break;
            case 2:
                pnum.GetComponent<presentnum>().add(0, 0, 5); ;
                break;
            case 3:
                spd.GetComponent<spawnd>().doublehp();
                break;
            default:
                break;
        }
    }



    //OnAdOpened の後にユーザーが別のアプリ（Google Play ストアなど）を起動し、現在のアプリがバックグラウンドに移動すると、このメソッドが呼び出されます。
    public void HandleOnAdLeavingApplication(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdLeavingApplication event received");
    }

    public void ShowInterstitialAd(int num)
    {
         if (this.interstitial.IsLoaded())
        {
            this.interstitial.Show();
            number = num;
        }
        else
        {
            Debug.Log("まだ読み込みができていない");
        }
    }

    // 一度リセット：次の広告表示の前に実行しておく必要あり
    public void DestroyInterstitialAd()
    {
        interstitial.Destroy();
    }
    public void open()
    {
        shops.SetActive(true);
        bg.GetComponent<sound>().stastop(true);
        bg.GetComponent<sound>().change_bgm(2);
    }
    public void close()
    {
        shops.SetActive(false);
        bg.GetComponent<sound>().stastop(true);
        bg.GetComponent<sound>().change_bgm(0);
    }
}










using System;
using UnityEngine;
using GoogleMobileAds.Api;
using UnityEngine.Events;
using UnityEngine.UI;
using TMPro;
using System.IO;

public class restart : MonoBehaviour
{
    private string Message;
    public GameObject pane;
    public GameObject pane_2;
    public GameObject txt;
    public GameObject txt_2;
    public GameObject dragon;
    GameObject BGM;
    GameObject spd;
    GameObject point;
    int scor;
    int lv;
    private RewardedAd rewardedAd;

    // Use this for initialization
    // 関数を登録するもの：広告表示をしたときに実行する（Unityエディタから設定）
    public UnityEvent OnOpeningAd;
    // 関数を登録するもの：広告表示を閉じたときに実行する（Unityエディタから設定）
    public UnityEvent OnClosedAd;

    private InterstitialAd interstitial;
    
    private void Start()
    {
        RequestInterstitial();
        pane.SetActive(false);
        pane_2.SetActive(false);
        spd = GameObject.Find("spawndirecot");
        point = GameObject.Find("scoredirector");
        BGM = GameObject.Find("BGM_2");
    }

    // 広告読み込み：次の広告表示の前に実行しておく必要あり
    public void RequestInterstitial()
    {
#if UNITY_ANDROID
        string adUnitId = "ca-app-pub-6337026109907124/9668241304";
#elif UNITY_IPHONE
        string adUnitId = "ca-app-pub-3940256099942544/4411468910";
#else
        string adUnitId = "unexpected_platform";
#endif
        // Initialize an InterstitialAd.
        this.interstitial = new InterstitialAd(adUnitId);
        DestroyInterstitialAd();

        this.interstitial.OnAdLoaded += HandleOnAdLoaded;
        this.interstitial.OnAdFailedToLoad += HandleOnAdFailedToLoad;
        this.interstitial.OnAdOpening += HandleOnAdOpened;
        this.interstitial.OnAdClosed += HandleOnAdClosed;
        //this.interstitial.OnAdLeavingApplication += HandleOnAdLeavingApplication;

        // Create an empty ad request.
        AdRequest request = new AdRequest.Builder().Build();
        // Load the interstitial with the request.
        this.interstitial.LoadAd(request);
    }

    // OnAdLoaded イベントは、広告の読み込みが完了すると実行されます。
    public void HandleOnAdLoaded(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdLoaded event received");
    }

    // OnAdFailedToLoad イベントは、広告の読み込みに失敗すると呼び出されます。Message パラメータは、発生した障害のタイプを示します。
    public void HandleOnAdFailedToLoad(object sender, AdFailedToLoadEventArgs args)
    {
        // MonoBehaviour.print("HandleFailedToReceiveAd event received with message: "
        //+ args.Message);
    }

    // このメソッドは、広告がデバイスの画面いっぱいに表示されたときに呼び出されます。
    public void HandleOnAdOpened(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdOpened event received");
        OnOpeningAd.Invoke();
    }

    // このメソッドは、ユーザーが「閉じる」アイコンまたは「戻る」ボタンをタップしてインタースティシャル広告を閉じたときに呼び出されます。音声出力やゲームループを一時停止するアプリの場合は、ここで再開すると効果的です。
    public void HandleOnAdClosed(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdClosed event received");
        OnClosedAd.Invoke();
        RequestInterstitial();
        rest();
    }

    //OnAdOpened の後にユーザーが別のアプリ（Google Play ストアなど）を起動し、現在のアプリがバックグラウンドに移動すると、このメソッドが呼び出されます。
    public void HandleOnAdLeavingApplication(object sender, EventArgs args)
    {
        MonoBehaviour.print("HandleAdLeavingApplication event received");
    }

    public void ShowInterstitialAd()
    {
        if (this.interstitial.IsLoaded())
        {
            this.interstitial.Show();
        }
        else
        {
            Debug.Log("まだ読み込みができていない");
        }
    }

    // 一度リセット：次の広告表示の前に実行しておく必要あり
    public void DestroyInterstitialAd()
    {
        interstitial.Destroy();
    }
    public void open()
    {
        pane.SetActive(true);
        //point.GetComponent<score>().stop();
        BGM.GetComponent<sound_2>().stastop(true);
        Time.timeScale = 0;

    }
    public void continues()
    {

    }
    public void score()
    {
        pane_2.SetActive(true);
        scor = point.GetComponent<score>().sc();
        lv = spd.GetComponent<spawnd>().lvl();
        best(scor, lv);
        txt.GetComponent<TextMeshProUGUI>().text = "SCORE: " + scor.ToString("F0");
        txt_2.GetComponent<TextMeshProUGUI>().text = "Level: " + lv.ToString("F0");
    }
    public void quit()
    {
        
        spd.GetComponent<spawnd>().controlhp(-20, 0);
        spd.GetComponent<spawnd>().level(0);
        point.GetComponent<score>().start();
        Time.timeScale = 1;
    }
    public void rest()
    {
        dragon.GetComponent<dragon_controller>().restart();
        point.GetComponent<score>().start();
        pane.SetActive(false);
        Time.timeScale = PlayerPrefs.GetFloat("gs");
        BGM.GetComponent<sound_2>().stastop(false);
    }
    void best(int sc,int lv)
    {
        if (PlayerPrefs.GetInt("bestlevel") < lv)
        {
            PlayerPrefs.SetInt("bestlevel", lv);
        }
        if (PlayerPrefs.GetInt("bestscore") < sc)
        {
            PlayerPrefs.SetInt("bestscore", sc);
        }
        PlayerPrefs.Save();
    }
}



